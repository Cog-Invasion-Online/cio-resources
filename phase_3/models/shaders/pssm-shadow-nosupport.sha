//Cg

void vshader(float4 vtx_position : POSITION,
             float2 vtx_texcoord0: TEXCOORD0,
             float3 vtx_normal: NORMAL,

             uniform float4x4 trans_model_to_clip_of_light0,
             uniform float4x4 trans_model_to_clip_of_light1,
             uniform float4x4 trans_model_to_clip_of_light2,
             uniform float4x4 trans_model_to_clip_of_light3,
             uniform float4x4 mat_modelproj,
             uniform float4 mspos_light0,
             uniform float4 mspos_light1,
             uniform float4 mspos_light2,
             uniform float4 mspos_light3,
             uniform float4 k_scale,
             uniform float4 k_push,
             uniform float4 k_lightDirection,

             out float4 l_position : POSITION,
             
             out float2 l_texcoord0 : TEXCOORD0,
             out float4 l_shadowcoord0 : TEXCOORD1,
             out float4 l_shadowcoord1 : TEXCOORD2,
             out float4 l_shadowcoord2 : TEXCOORD3,
             out float4 l_shadowcoord3 : TEXCOORD4,
             out float l_smooth : TEXCOORD5
             )

{
float4 position = vtx_position * k_scale;

// vertex position
l_position = mul(mat_modelproj, position);

// Pass through texture coordinate for main texture.
l_texcoord0 = vtx_texcoord0;

// Calculate the surface lighting factor.
l_smooth = saturate(dot(vtx_normal, -normalize(k_lightDirection.xyz)));

// Calculate light-space clip position.
float4 pushed = position + float4(vtx_normal * k_push, 0);
float4 l_lightclip0 = mul(trans_model_to_clip_of_light0, pushed);
float4 l_lightclip1 = mul(trans_model_to_clip_of_light1, pushed);
float4 l_lightclip2 = mul(trans_model_to_clip_of_light2, pushed);
float4 l_lightclip3 = mul(trans_model_to_clip_of_light3, pushed);

// Calculate shadow-map texture coordinates.
l_shadowcoord0 = l_lightclip0 * float4(0.5,0.5,0.5,1.0) + l_lightclip0.w * float4(0.5,0.5,0.5,0.0);
l_shadowcoord1 = l_lightclip1 * float4(0.5,0.5,0.5,1.0) + l_lightclip1.w * float4(0.5,0.5,0.5,0.0);
l_shadowcoord2 = l_lightclip2 * float4(0.5,0.5,0.5,1.0) + l_lightclip2.w * float4(0.5,0.5,0.5,0.0);
l_shadowcoord3 = l_lightclip3 * float4(0.5,0.5,0.5,1.0) + l_lightclip3.w * float4(0.5,0.5,0.5,0.0);
}


void fshader(in float2 l_texcoord0 : TEXCOORD0,
             in float4 l_shadowcoord0 : TEXCOORD1,
             in float4 l_shadowcoord1 : TEXCOORD2,
             in float4 l_shadowcoord2 : TEXCOORD3,
             in float4 l_shadowcoord3 : TEXCOORD4,
	     	 in float l_smooth : TEXCOORD5,
             
             in float4 l_fragCoord : WPOS, 
             
             uniform sampler2D tex_0 : TEXUNIT0,
          	 
             uniform sampler2D k_depthmap0 : TEXUNIT1,
             uniform sampler2D k_depthmap1 : TEXUNIT2,
             uniform sampler2D k_depthmap2 : TEXUNIT3,
             uniform sampler2D k_depthmap3 : TEXUNIT4,
             
             uniform float4 k_depth,
             
             
             
             uniform float4 k_lightColor,
	     	 uniform float4 k_debugColors,
	     	 
             out float4 o_color:COLOR)
{
  float4 baseColor = saturate(tex2D(tex_0, l_texcoord0));
  
  
  
  //Compare the current fragment depth with each split depth, and find the appropriate depth map
  float4 color;
  float mapval;
  float4 proj;
  float shade;


  float depth = l_fragCoord.z / l_fragCoord.w;
  if(depth < k_depth.x){
  	
  	proj = l_shadowcoord0 / l_shadowcoord0.w;
  	mapval = tex2D(k_depthmap0,proj.xy)*float4(1.0, 0.0, 0.0, 0.0);
  	
  	shade = (mapval > proj.z);
  	
  	color = baseColor * (shade*l_smooth + k_lightColor)  + k_debugColors.x * float4(0.1,0,0,0);
  	
  	
  }
  
  else if(depth < k_depth.y){
  	
  	proj = l_shadowcoord1 / l_shadowcoord1.w;
  	mapval = tex2D(k_depthmap1,proj.xy);
  	
  	shade = (mapval > proj.z);
  	
  	color = baseColor * (shade*l_smooth + k_lightColor) + k_debugColors.x * float4(0,0.1,0,0);
  	
  }
  else if(depth < k_depth.z){
  	
  	proj = l_shadowcoord2 / l_shadowcoord2.w;
  	mapval = tex2D(k_depthmap2,proj.xy);
  	
  	shade = (mapval > proj.z);
  	
  	color = baseColor * (shade*l_smooth + k_lightColor) + k_debugColors.x * float4(0,0,0.1,0);
  	
  }
  else if(depth < k_depth.w){
  	
  	proj = l_shadowcoord3 / l_shadowcoord3.w;
  	mapval = tex2D(k_depthmap3,proj.xy);
  	
  	shade = (mapval > proj.z);
  	
  	color = baseColor * (shade*l_smooth + k_lightColor) + k_debugColors.x * float4(0.1,0.1,0.0,0);
  	
  }
  
  	
  //color.a = baseColor.a;
  o_color = color;
  	
  	
  	
  
  
  
  
  
  
}
