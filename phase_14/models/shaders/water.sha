//Cg
//
//Cg profile arbvp1 arbfp1

void vshader(float4 vtx_position : POSITION,
             float2 vtx_texcoord0 : TEXCOORD0,
             
             uniform float4x4 mat_modelproj,
             uniform float4x4 trans_view_to_model,
			 uniform float dudv_tile,
			 
			 out float4 l_position : POSITION,
             out float4 l_texcoord0 : TEXCOORD0,
			 out float4 l_texcoord1 : TEXCOORD1,
             out float3 l_eye_vec : TEXCOORD2)
{
   	l_position = mul(mat_modelproj, vtx_position);

    float4x4 scale_mat = { 0.5f, 0.0f, 0.0f, 0.5f,
         	               0.0f, 0.5f, 0.0f, 0.5f,
                           0.0f, 0.0f, 0.5f, 0.5f,
                           0.0f, 0.0f, 0.0f, 1.0f };
   	l_texcoord0 = mul(mul(scale_mat, mat_modelproj), vtx_position);

	l_texcoord1.xy = float2(vtx_position.x / 2.0 + 0.5, vtx_position.y / 2.0 + 0.5) * dudv_tile;
    
    l_eye_vec = normalize(mul(trans_view_to_model, vtx_position).xyz - vtx_position.xyz);
}

void fshader(float4 l_texcoord0 : TEXCOORD0,
             float4 l_texcoord1 : TEXCOORD1,
             in float3 l_eye_vec : TEXCOORD2,
             in float4 l_frag_coord : WPOS,
             out float4 o_color : COLOR,
			 uniform sampler2D k_refl : TEXUNIT0,
			 uniform sampler2D k_refr : TEXUNIT1,
			 uniform sampler2D k_dudv : TEXUNIT2,
			 uniform sampler2D k_refr_depth : TEXUNIT3,
			 uniform sampler2D k_normal : TEXUNIT4,
			 uniform float reflectivity,
			 uniform float shine_damper,
			 uniform float dudv_strength,
			 uniform float move_factor,
			 uniform float near,
			 uniform float far,
			 uniform float3 lightdir,
			 uniform float3 lightcol)
{

	float depth = tex2Dproj(k_refr_depth, l_texcoord0.xyz).r;
	float floor_dist = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));

	depth = l_frag_coord.z / l_frag_coord.w;
	float water_dist = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	float water_depth = floor_dist - water_dist;

	float4 distort_coord1 = float4(-l_texcoord1.x + move_factor, l_texcoord1.y + move_factor, l_texcoord1.z, l_texcoord1.w);
	float4 distort_coord2 = float4(l_texcoord1.x + move_factor, -l_texcoord1.y + move_factor, l_texcoord1.z, l_texcoord1.w);

	float2 distort = (tex2Dproj(k_dudv, distort_coord1).rg * 2.0 - 1.0) * dudv_strength;
	float2 distort2 = (tex2Dproj(k_dudv, distort_coord2).rg * 2.0 - 1.0) * dudv_strength;

	float depth_factor = clamp(water_depth / 30.0, 0.0001, 1);

	float2 total_distort = (distort + distort2) * depth_factor;

	l_texcoord0.xy += total_distort;

	float4 refl_col = tex2Dproj(k_refl, l_texcoord0);
	float4 refr_col = tex2Dproj(k_refr, l_texcoord0);

	float4 norm_col = tex2Dproj(k_normal, l_texcoord1 + float4(total_distort.x, total_distort.y, 0, 0));
	float3 normal = float3(norm_col.r * 2.0 - 1.0, norm_col.b, norm_col.g * 2.0 - 1.0);
	normal = normalize(normal);

	float3 refl_light = reflect(normalize(lightdir), normal);
	float spec = max(dot(refl_light, l_eye_vec), 0.0);
	spec = pow(spec, shine_damper);
	float3 spec_highlight = lightcol * spec * reflectivity;

	// Fresnel effect
	float refr_factor = clamp(dot(l_eye_vec, float3(0, 0, 1)), 0.3, 1.0);
    
	o_color = lerp(refl_col, refr_col, clamp(refr_factor / depth_factor, 0, 1));
	o_color.rgb = lerp(o_color.rgb, float3(0.0, 0.3, 0.7), 0.2);
	o_color.rgb += spec_highlight;
}